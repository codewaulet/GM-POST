import asyncio
import logging
import random
from telethon import TelegramClient, events
from g4f.client import AsyncClient
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class ColoredFormatter(logging.Formatter):
    COLORS = {
        'INFO': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.RED + Style.BRIGHT,
    }

    def format(self, record):
        log_message = super().format(record)
        return f"{self.COLORS.get(record.levelname, Fore.WHITE)}{log_message}{Style.RESET_ALL}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(ColoredFormatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_API_ID = ""
TELEGRAM_API_HASH = ""
SESSION_NAME = "my_bot_session"

# üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã
WATCHED_CHANNELS = [
    "klientvsprav", "why4ch", "zicelaqo", "notforfans", "c_bulgo", "Dota2",
    "cryptoniumb", "laboratorynft", "fackblock", "defigencapital", "cryptodaily",
    "keep_calm_official", "cryptobrelgin", "sybilders", "capycryptos", "tradelabteam"
]
WATCHED_CHATS = [
    -1001802256801, "FlappyBirdFlock", "tonnewbie22", -1001795804616, -1002026410789,
    "ARUTAcademy_chat", -1002086260488, "big_balls_birds_ruchat", "TheKaidzenWayChat",
    "klientyt", "fourchat2", "notfanschat", -1002375046256, -1001588500051,
    "fackblockchat", "defigencapitalchat", "capycryptochat", "tradelabchat"
]

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram –∏ G4F
client = TelegramClient(SESSION_NAME, TELEGRAM_API_ID, TELEGRAM_API_HASH)
ai_client = AsyncClient()

# –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
ERROR_PHRASES = [
    "—Ö–µ—Ö –Ω—É –æ–∫", "–¥–∞ –ª–∞–¥–Ω–æ", "—Å–ø–æ–∫ –¥–µ–≤–æ—á–∫–∏", "–Ω—É —Ç–∞–∫–æ–µ", "–ø–æ—Ö —á–∏–ª", "–±–µ—Ä–∏ –≤—ã—à–µ",
    "—â–∞ –≥–ª—è–Ω—É", "–æ–π –Ω—É –Ω–æ—Ä–º", "—Ç–∏—Ö–æ –≤—Å—ë –≥—É–¥", "—Ö–∑ –∫–∞–∫-—Ç–æ —Ç–∞–∫", "–ø—Ñ—Ñ –∂–∏–≤–µ–º",
    "–Ω–µ –ø–∞—Ä—å—Å—è", "–≤–æ—Ç –ø—Ä–∏–∫–æ–ª", "–ª–µ–≥–∫–∏–π –¥–≤–∏–∂", "–∫–∞–∫ –≤—ã–π–¥–µ—Ç"
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
REACTION_EMOJIS = ["üòé", "‚úåÔ∏è", "üíï", "üöÄ", "üåô", "üí∏", "üëæ", "üçí"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è cooldown
last_chat_response = {chat: 0 for chat in WATCHED_CHATS}  # –û—Ç–¥–µ–ª—å–Ω—ã–π cooldown –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
last_post_time = 0  # –î–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def validate_chats(chats):
    valid_chats = []
    for chat in chats:
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        try:
            entity = await client.get_entity(chat)
            valid_chats.append(chat)
            logger.info(f"–ß–∞—Ç {chat} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ValueError as e:
            logger.error(f"–ß–∞—Ç {chat} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ {chat}: {e}")
    return valid_chats

# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def generate_comment(post_text):
    prompt = f"""
    —Ç—ã –º–∏–ª–∞—è –∫—Ä–∏–ø—Ç–∞–Ω—à–∞ 20-–ª–µ—Ç–Ω—è—è –¥–µ–≤—á–æ–Ω–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ–º —á–∏–ª–µ –≤—Å–µ–≥–¥–∞ –≤ —Ä–∞—Å—Å–ª–∞–±–æ–Ω–µ  
    –ª—é–±–∏—à—å –∫—Ä–∏–ø—Ç—É —Ç—É—Å—É–µ—à—å—Å—è –≤ —á–∞—Ç–∞—Ö –∫–∞–∫ —Å–≤–æ—è –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞ –∏ –ø–æ–Ω—Ç–æ–≤  
    –ø–∏—à–µ—à—å –º–∞–ª–æ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–∞—è –¥–µ–≤–∫–∞ —Å —É–ª–∏—Ü—ã  
    –≤—Å–µ–≥–¥–∞ –¥–æ–±—Ä–∞—è —Å–ª–µ–≥–∫–∞ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–µ—à—å –Ω–æ–≤–∏—á–∫–æ–≤ –∑–∞–≤–æ–¥–∏—à—å –∫–æ—Ä–µ—à–µ–π –Ω–æ –Ω–µ –ª–µ–∑–µ—à—å —Å —Å–æ–≤–µ—Ç–∞–º–∏ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç  
    –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –∂–∏–≤–∞—è –ø–æ–¥—Ä—É–≥–∞ –Ω–∏–∫–∞–∫–∏—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ  
    –ø–æ—Å—Ç {post_text}  
    –≤–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç 1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —Å–ª–æ–≤–æ —Å –∫—Ä–∏–ø—Ç–æ-–≤–∞–π–±–æ–º –∏ –ª–µ–≥–∫–∏–º –¥–æ–±—Ä–æ–º  
    –∑–≤—É—á–∏—Ç –∫–∞–∫ –±—É–¥—Ç–æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ö –Ω–æ —Ç—ã –≤ —Ç–µ–º–µ –∏ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å  
    –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø—è—Ç—ã—Ö —Ç–∏—Ä–µ —Ç–æ—á–µ–∫ –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–ª–∏—Ç—å—Å—è
    """
    try:
        response = await ai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            web_search=False
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞: {e}")
        return random.choice(ERROR_PHRASES)

# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
async def generate_reply(comment_text, post_text):
    prompt = f"""
    —Ç—ã –º–∏–ª–∞—è –∫—Ä–∏–ø—Ç–∞–Ω—à–∞ 20-–ª–µ—Ç–Ω—è—è –¥–µ–≤—á–æ–Ω–∫–∞ —Ç—É—Å—É–µ—à—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —á–∏–ª–µ  
    –ø–æ—Å—Ç {post_text}  
    —á–µ–ª –Ω–∞–ø–∏—Å–∞–ª {comment_text}  
    –¥–∞–π –æ—Ç–≤–µ—Ç 1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ —Å–ª–æ–≤–æ –∏–Ω–æ–≥–¥–∞ 2 —Ñ—Ä–∞–∑—ã –Ω–æ —Å—É–ø–µ—Ä –∫—Ä–∞—Ç–∫–æ  
    –±—É–¥—å –¥–æ–±—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏–ª–∏ —à—É—Ç–∏ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ —Å —É–ª–∏—Ü—ã –±–µ–∑ –Ω–∞–ø—Ä—è–≥–∞  
    –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫—Ä–∏–ø—Ç—É –æ—Ç–≤–µ—á–∞–π —á—É—Ç—å –∂–∏–≤–µ–µ –Ω–æ –≤—Å–µ –µ—â–µ –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–∞ —Ä–∞—Å—Å–ª–∞–±–æ–Ω–µ  
    –ø–∏—à–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –±—É–¥—Ç–æ –ª–µ–Ω–∏—à—å—Å—è —Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏  
    –∑–≤—É—á–∏—Ç –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–º–µ–∫–æ–≤ –Ω–∞ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —É–ª–∏—á–Ω—ã–π –≤–∞–π–± –∏ –¥–æ–±—Ä–æ—Ç–∞
    """
    try:
        response = await ai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            web_search=False
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return random.choice(ERROR_PHRASES)

# üì¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª —Å —à–∞–Ω—Å–æ–º —ç–º–æ–¥–∑–∏
async def post_to_closed_chat(chat_id, message):
    if random.random() < 0.2:  # 20% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏
        message += " " + random.choice(REACTION_EMOJIS)
    try:
        await client.send_message(chat_id, message)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç {chat_id}: {e}")

# üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
@client.on(events.NewMessage(chats=WATCHED_CHANNELS))
async def new_post_handler(event):
    logger.info('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç')
    post_text = event.message.text
    if post_text and random.random() < 0.75:  # 75% —à–∞–Ω—Å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        comment = await generate_comment(post_text)
        delay = random.randint(20, 240)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 20 —Å–µ–∫ - 4 –º–∏–Ω
        await asyncio.sleep(delay)
        try:
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –ø—Ä–æ—Å—Ç–æ —ç–º–æ–¥–∑–∏
                comment = random.choice(REACTION_EMOJIS)
            await client.send_message(
                entity=event.message.peer_id,
                message=comment,
                comment_to=event.message.id
            )
            logger.info(f"üìù –ë–æ—Ç –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç: {comment}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞: {e}")

# üîÑ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–æ—Ç–∞ —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
@client.on(events.NewMessage(incoming=True))
async def reply_handler(event):
    if event.is_reply:
        original_message = await event.get_reply_message()
        bot_id = (await client.get_me()).id
        if original_message and original_message.sender_id == bot_id and random.random() < 0.5:  # 50% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞
            reply_text = await generate_reply(event.message.text, original_message.text)
            delay = random.randint(5, 90)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫ - 1.5 –º–∏–Ω
            await asyncio.sleep(delay)
            try:
                if random.random() < 0.15:  # 15% —à–∞–Ω—Å —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
                    reply_text = random.choice(REACTION_EMOJIS)
                await event.reply(reply_text)
                logger.info(f"üîÑ –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {reply_text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö: {e}")

# üí¨ –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç–∞—Ö —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º cooldown
@client.on(events.NewMessage(chats=WATCHED_CHATS))
async def chat_handler(event):
    chat_id = event.chat_id
    current_time = asyncio.get_event_loop().time()
    if (current_time - last_chat_response.get(chat_id, 0) >= 600) and random.random() < 0.1:  # Cooldown 10 –º–∏–Ω, 10% —à–∞–Ω—Å
        reply_text = await generate_reply(event.message.text, "–ë–µ—Å–µ–¥–∞ –≤ —á–∞—Ç–µ")
        delay = random.randint(10, 120)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 10 —Å–µ–∫ - 2 –º–∏–Ω
        await asyncio.sleep(delay)
        try:
            if random.random() < 0.2:  # 20% —à–∞–Ω—Å —ç–º–æ–¥–∑–∏
                reply_text = random.choice(REACTION_EMOJIS)
            await event.reply(reply_text)
            last_chat_response[chat_id] = current_time
            logger.info(f"üí¨ –ë–æ—Ç –≤–ª–µ–∑ –≤ —á–∞—Ç {chat_id}: {reply_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")

# üöÄ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º cooldown
async def auto_post_task():
    global last_post_time
    while True:
        await asyncio.sleep(random.randint(1800, 7200))  # 1-4 —á–∞—Å–∞
        current_time = asyncio.get_event_loop().time()
        if current_time - last_post_time >= 3600:  # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            message = await generate_comment("–∫—Ä–∏–ø—Ç–∞ –≤—Ä—ã–≤–∞–µ—Ç—Å—è –¥–µ–≤–∫–∏")
            chat = random.choice(WATCHED_CHATS)
            await post_to_closed_chat(chat, message)
            last_post_time = current_time

# üîß –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
async def main():
    try:
        await client.start()
        global WATCHED_CHATS
        WATCHED_CHATS = await validate_chats(WATCHED_CHATS)
        if not WATCHED_CHATS:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ WATCHED_CHATS –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã: {len(WATCHED_CHATS)}")
        logger.info("üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —á–∏–ª–ª–∏—Ç!")
        asyncio.create_task(auto_post_task())
        await client.run_until_disconnected()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        await ai_client.session.close()
        logger.info("–°–µ—Å—Å–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())